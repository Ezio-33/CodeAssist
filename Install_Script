#!/bin/bash

# Arrêter le script en cas d'erreur
set -e

# Fonction pour gérer les erreurs
handle_error() {
    echo -e "\e[1;31mUne erreur s'est produite. Nettoyage et sortie...\e[0m"
    # Ajoutez ici des commandes de nettoyage si nécessaire
    exit 1
}

# Utilisation de trap pour gérer les erreurs et le nettoyage
trap 'handle_error' ERR

# Fonction pour vérifier les dépendances
check_dependency() {
    if ! command -v "$1" &> /dev/null; then
        echo -e "\e[1;31mErreur: $1 n'est pas installé. Veuillez l'installer et réessayer.\e[0m"
        exit 1
    fi
}

# Vérification des dépendances
check_dependency curl
check_dependency pip
check_dependency npm

# Chemins des fichiers et dossiers
script_dir="/root/.Script_Prod"
github_url=(
    "https://raw.githubusercontent.com/Ezio-33/Script_Prod/master/Script_git/git_auto"
    "https://raw.githubusercontent.com/Ezio-33/Script_Prod/master/Script_git/Preparation_Projet"
    "https://raw.githubusercontent.com/Ezio-33/Script_Prod/master/Script_git/Fix_js"
    "https://raw.githubusercontent.com/Ezio-33/Script_Prod/master/Script_git/Fix_Pycode"
)

# Création du dossier s'il n'existe pas déjà
mkdir -p "$script_dir"

# Téléchargement des scripts depuis GitHub
curl_options="-fsSL" 
for url in "${github_url[@]}"; do
    script_file="$script_dir/$(basename "$url")"
    if curl $curl_options -o "$script_file" -z "$script_file" "$url"; then
        echo -e "\e[1;32mScript $(basename "$url") téléchargé avec succès.\e[0m"
        chmod u+x "$script_file"
    else
        echo -e "\e[1;31mErreur lors du téléchargement du script $(basename "$url") depuis GitHub.\e[0m"
        exit 1
    fi
done

# Installer les dernières versions compatibles des dépendances Python
pip install --upgrade autopep8 flake8

# Installer ou mettre à jour ESLint
npm install --global eslint@latest

# Mettre à jour npm à la dernière version
npm install -g npm@latest

# Ajout du dossier au PATH de manière permanente
if ! grep -q "export PATH=\$PATH:$script_dir" ~/.bashrc; then
    echo "export PATH=\$PATH:$script_dir" >> ~/.bashrc
    # Décommenter les lignes de bash_completion si nécessaire
    sed -i '/^#if \[ -f \/etc\/bash_completion \] && ! shopt -oq posix; then/s/^#//' ~/.bashrc
    sed -i '/^#    \. \/etc\/bash_completion/s/^#//' ~/.bashrc
    sed -i '/^#fi/s/^#//' ~/.bashrc
    # Rechargement du fichier .bashrc
    source ~/.bashrc
fi

# Fonction pour supprimer le script d'installation
cleanup() {
    if [ -f "${BASH_SOURCE[0]}" ]; then
        rm -- "${BASH_SOURCE[0]}"
        if [ ! -f "${BASH_SOURCE[0]}" ]; then
            echo -e "\e[1;32mLe fichier d'installation a été supprimé avec succès.\e[0m"
        else
            echo -e "\e[1;31mErreur lors de la suppression du fichier d'installation.\e[0m"
            exit 1
        fi
    fi
}

# Utilisation de trap pour assurer la suppression du script à la fin de l'exécution
trap cleanup EXIT

echo -e "\e[1;32mInstallation et configuration terminées.\e[0m"